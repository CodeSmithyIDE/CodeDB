// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DNSQueryService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DNSQueryService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Sitinel {
class DNSQueryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DNSQueryRequest> {
} _DNSQueryRequest_default_instance_;
class DNSQueryResponse_RecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DNSQueryResponse_Record> {
} _DNSQueryResponse_Record_default_instance_;
class DNSQueryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DNSQueryResponse> {
} _DNSQueryResponse_default_instance_;

namespace protobuf_DNSQueryService_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryRequest, domain_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryRequest, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryResponse_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryResponse_Record, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryResponse_Record, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DNSQueryResponse, records_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(DNSQueryRequest)},
  { 6, -1, sizeof(DNSQueryResponse_Record)},
  { 12, -1, sizeof(DNSQueryResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DNSQueryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DNSQueryResponse_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DNSQueryResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "DNSQueryService.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _DNSQueryRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DNSQueryResponse_Record_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DNSQueryResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DNSQueryRequest_default_instance_.DefaultConstruct();
  _DNSQueryResponse_Record_default_instance_.DefaultConstruct();
  _DNSQueryResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025DNSQueryService.proto\022\007Sitinel\"I\n\017DNSQ"
      "ueryRequest\022\023\n\013domain_name\030\001 \001(\t\022!\n\004type"
      "\030\002 \001(\0162\023.Sitinel.RecordType\"\200\001\n\020DNSQuery"
      "Response\0221\n\007records\030\001 \003(\0132 .Sitinel.DNSQ"
      "ueryResponse.Record\0329\n\006Record\022!\n\004type\030\001 "
      "\001(\0162\023.Sitinel.RecordType\022\014\n\004data\030\002 \001(\t*\023"
      "\n\nRecordType\022\005\n\001A\020\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DNSQueryService.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_DNSQueryService_2eproto

const ::google::protobuf::EnumDescriptor* RecordType_descriptor() {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_enum_descriptors[0];
}
bool RecordType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSQueryRequest::kDomainNameFieldNumber;
const int DNSQueryRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSQueryRequest::DNSQueryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DNSQueryService_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sitinel.DNSQueryRequest)
}
DNSQueryRequest::DNSQueryRequest(const DNSQueryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain_name().size() > 0) {
    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Sitinel.DNSQueryRequest)
}

void DNSQueryRequest::SharedCtor() {
  domain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DNSQueryRequest::~DNSQueryRequest() {
  // @@protoc_insertion_point(destructor:Sitinel.DNSQueryRequest)
  SharedDtor();
}

void DNSQueryRequest::SharedDtor() {
  domain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DNSQueryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSQueryRequest::descriptor() {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[0].descriptor;
}

const DNSQueryRequest& DNSQueryRequest::default_instance() {
  protobuf_DNSQueryService_2eproto::InitDefaults();
  return *internal_default_instance();
}

DNSQueryRequest* DNSQueryRequest::New(::google::protobuf::Arena* arena) const {
  DNSQueryRequest* n = new DNSQueryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Sitinel.DNSQueryRequest)
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool DNSQueryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sitinel.DNSQueryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string domain_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Sitinel.DNSQueryRequest.domain_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Sitinel.RecordType type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Sitinel::RecordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sitinel.DNSQueryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sitinel.DNSQueryRequest)
  return false;
#undef DO_
}

void DNSQueryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sitinel.DNSQueryRequest)
  // string domain_name = 1;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Sitinel.DNSQueryRequest.domain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain_name(), output);
  }

  // .Sitinel.RecordType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:Sitinel.DNSQueryRequest)
}

::google::protobuf::uint8* DNSQueryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Sitinel.DNSQueryRequest)
  // string domain_name = 1;
  if (this->domain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Sitinel.DNSQueryRequest.domain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain_name(), target);
  }

  // .Sitinel.RecordType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Sitinel.DNSQueryRequest)
  return target;
}

size_t DNSQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sitinel.DNSQueryRequest)
  size_t total_size = 0;

  // string domain_name = 1;
  if (this->domain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain_name());
  }

  // .Sitinel.RecordType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSQueryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Sitinel.DNSQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSQueryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSQueryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Sitinel.DNSQueryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Sitinel.DNSQueryRequest)
    MergeFrom(*source);
  }
}

void DNSQueryRequest::MergeFrom(const DNSQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Sitinel.DNSQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.domain_name().size() > 0) {

    domain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSQueryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Sitinel.DNSQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSQueryRequest::CopyFrom(const DNSQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sitinel.DNSQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSQueryRequest::IsInitialized() const {
  return true;
}

void DNSQueryRequest::Swap(DNSQueryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSQueryRequest::InternalSwap(DNSQueryRequest* other) {
  domain_name_.Swap(&other->domain_name_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSQueryRequest::GetMetadata() const {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSQueryRequest

// string domain_name = 1;
void DNSQueryRequest::clear_domain_name() {
  domain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DNSQueryRequest::domain_name() const {
  // @@protoc_insertion_point(field_get:Sitinel.DNSQueryRequest.domain_name)
  return domain_name_.GetNoArena();
}
void DNSQueryRequest::set_domain_name(const ::std::string& value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Sitinel.DNSQueryRequest.domain_name)
}
#if LANG_CXX11
void DNSQueryRequest::set_domain_name(::std::string&& value) {
  
  domain_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Sitinel.DNSQueryRequest.domain_name)
}
#endif
void DNSQueryRequest::set_domain_name(const char* value) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Sitinel.DNSQueryRequest.domain_name)
}
void DNSQueryRequest::set_domain_name(const char* value, size_t size) {
  
  domain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Sitinel.DNSQueryRequest.domain_name)
}
::std::string* DNSQueryRequest::mutable_domain_name() {
  
  // @@protoc_insertion_point(field_mutable:Sitinel.DNSQueryRequest.domain_name)
  return domain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DNSQueryRequest::release_domain_name() {
  // @@protoc_insertion_point(field_release:Sitinel.DNSQueryRequest.domain_name)
  
  return domain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DNSQueryRequest::set_allocated_domain_name(::std::string* domain_name) {
  if (domain_name != NULL) {
    
  } else {
    
  }
  domain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain_name);
  // @@protoc_insertion_point(field_set_allocated:Sitinel.DNSQueryRequest.domain_name)
}

// .Sitinel.RecordType type = 2;
void DNSQueryRequest::clear_type() {
  type_ = 0;
}
::Sitinel::RecordType DNSQueryRequest::type() const {
  // @@protoc_insertion_point(field_get:Sitinel.DNSQueryRequest.type)
  return static_cast< ::Sitinel::RecordType >(type_);
}
void DNSQueryRequest::set_type(::Sitinel::RecordType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Sitinel.DNSQueryRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSQueryResponse_Record::kTypeFieldNumber;
const int DNSQueryResponse_Record::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSQueryResponse_Record::DNSQueryResponse_Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DNSQueryService_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sitinel.DNSQueryResponse.Record)
}
DNSQueryResponse_Record::DNSQueryResponse_Record(const DNSQueryResponse_Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Sitinel.DNSQueryResponse.Record)
}

void DNSQueryResponse_Record::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

DNSQueryResponse_Record::~DNSQueryResponse_Record() {
  // @@protoc_insertion_point(destructor:Sitinel.DNSQueryResponse.Record)
  SharedDtor();
}

void DNSQueryResponse_Record::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DNSQueryResponse_Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSQueryResponse_Record::descriptor() {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[1].descriptor;
}

const DNSQueryResponse_Record& DNSQueryResponse_Record::default_instance() {
  protobuf_DNSQueryService_2eproto::InitDefaults();
  return *internal_default_instance();
}

DNSQueryResponse_Record* DNSQueryResponse_Record::New(::google::protobuf::Arena* arena) const {
  DNSQueryResponse_Record* n = new DNSQueryResponse_Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSQueryResponse_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:Sitinel.DNSQueryResponse.Record)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool DNSQueryResponse_Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sitinel.DNSQueryResponse.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Sitinel.RecordType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Sitinel::RecordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Sitinel.DNSQueryResponse.Record.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sitinel.DNSQueryResponse.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sitinel.DNSQueryResponse.Record)
  return false;
#undef DO_
}

void DNSQueryResponse_Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sitinel.DNSQueryResponse.Record)
  // .Sitinel.RecordType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Sitinel.DNSQueryResponse.Record.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:Sitinel.DNSQueryResponse.Record)
}

::google::protobuf::uint8* DNSQueryResponse_Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Sitinel.DNSQueryResponse.Record)
  // .Sitinel.RecordType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Sitinel.DNSQueryResponse.Record.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Sitinel.DNSQueryResponse.Record)
  return target;
}

size_t DNSQueryResponse_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sitinel.DNSQueryResponse.Record)
  size_t total_size = 0;

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .Sitinel.RecordType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSQueryResponse_Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Sitinel.DNSQueryResponse.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSQueryResponse_Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSQueryResponse_Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Sitinel.DNSQueryResponse.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Sitinel.DNSQueryResponse.Record)
    MergeFrom(*source);
  }
}

void DNSQueryResponse_Record::MergeFrom(const DNSQueryResponse_Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Sitinel.DNSQueryResponse.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DNSQueryResponse_Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Sitinel.DNSQueryResponse.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSQueryResponse_Record::CopyFrom(const DNSQueryResponse_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sitinel.DNSQueryResponse.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSQueryResponse_Record::IsInitialized() const {
  return true;
}

void DNSQueryResponse_Record::Swap(DNSQueryResponse_Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSQueryResponse_Record::InternalSwap(DNSQueryResponse_Record* other) {
  data_.Swap(&other->data_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSQueryResponse_Record::GetMetadata() const {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSQueryResponse_Record

// .Sitinel.RecordType type = 1;
void DNSQueryResponse_Record::clear_type() {
  type_ = 0;
}
::Sitinel::RecordType DNSQueryResponse_Record::type() const {
  // @@protoc_insertion_point(field_get:Sitinel.DNSQueryResponse.Record.type)
  return static_cast< ::Sitinel::RecordType >(type_);
}
void DNSQueryResponse_Record::set_type(::Sitinel::RecordType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Sitinel.DNSQueryResponse.Record.type)
}

// string data = 2;
void DNSQueryResponse_Record::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DNSQueryResponse_Record::data() const {
  // @@protoc_insertion_point(field_get:Sitinel.DNSQueryResponse.Record.data)
  return data_.GetNoArena();
}
void DNSQueryResponse_Record::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Sitinel.DNSQueryResponse.Record.data)
}
#if LANG_CXX11
void DNSQueryResponse_Record::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Sitinel.DNSQueryResponse.Record.data)
}
#endif
void DNSQueryResponse_Record::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Sitinel.DNSQueryResponse.Record.data)
}
void DNSQueryResponse_Record::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Sitinel.DNSQueryResponse.Record.data)
}
::std::string* DNSQueryResponse_Record::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:Sitinel.DNSQueryResponse.Record.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DNSQueryResponse_Record::release_data() {
  // @@protoc_insertion_point(field_release:Sitinel.DNSQueryResponse.Record.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DNSQueryResponse_Record::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:Sitinel.DNSQueryResponse.Record.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DNSQueryResponse::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DNSQueryResponse::DNSQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_DNSQueryService_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Sitinel.DNSQueryResponse)
}
DNSQueryResponse::DNSQueryResponse(const DNSQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Sitinel.DNSQueryResponse)
}

void DNSQueryResponse::SharedCtor() {
  _cached_size_ = 0;
}

DNSQueryResponse::~DNSQueryResponse() {
  // @@protoc_insertion_point(destructor:Sitinel.DNSQueryResponse)
  SharedDtor();
}

void DNSQueryResponse::SharedDtor() {
}

void DNSQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DNSQueryResponse::descriptor() {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[2].descriptor;
}

const DNSQueryResponse& DNSQueryResponse::default_instance() {
  protobuf_DNSQueryService_2eproto::InitDefaults();
  return *internal_default_instance();
}

DNSQueryResponse* DNSQueryResponse::New(::google::protobuf::Arena* arena) const {
  DNSQueryResponse* n = new DNSQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DNSQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Sitinel.DNSQueryResponse)
  records_.Clear();
}

bool DNSQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Sitinel.DNSQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Sitinel.DNSQueryResponse.Record records = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Sitinel.DNSQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Sitinel.DNSQueryResponse)
  return false;
#undef DO_
}

void DNSQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Sitinel.DNSQueryResponse)
  // repeated .Sitinel.DNSQueryResponse.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Sitinel.DNSQueryResponse)
}

::google::protobuf::uint8* DNSQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Sitinel.DNSQueryResponse)
  // repeated .Sitinel.DNSQueryResponse.Record records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Sitinel.DNSQueryResponse)
  return target;
}

size_t DNSQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Sitinel.DNSQueryResponse)
  size_t total_size = 0;

  // repeated .Sitinel.DNSQueryResponse.Record records = 1;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DNSQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Sitinel.DNSQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DNSQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Sitinel.DNSQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Sitinel.DNSQueryResponse)
    MergeFrom(*source);
  }
}

void DNSQueryResponse::MergeFrom(const DNSQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Sitinel.DNSQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  records_.MergeFrom(from.records_);
}

void DNSQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Sitinel.DNSQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSQueryResponse::CopyFrom(const DNSQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Sitinel.DNSQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSQueryResponse::IsInitialized() const {
  return true;
}

void DNSQueryResponse::Swap(DNSQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DNSQueryResponse::InternalSwap(DNSQueryResponse* other) {
  records_.UnsafeArenaSwap(&other->records_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DNSQueryResponse::GetMetadata() const {
  protobuf_DNSQueryService_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_DNSQueryService_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DNSQueryResponse

// repeated .Sitinel.DNSQueryResponse.Record records = 1;
int DNSQueryResponse::records_size() const {
  return records_.size();
}
void DNSQueryResponse::clear_records() {
  records_.Clear();
}
const ::Sitinel::DNSQueryResponse_Record& DNSQueryResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:Sitinel.DNSQueryResponse.records)
  return records_.Get(index);
}
::Sitinel::DNSQueryResponse_Record* DNSQueryResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:Sitinel.DNSQueryResponse.records)
  return records_.Mutable(index);
}
::Sitinel::DNSQueryResponse_Record* DNSQueryResponse::add_records() {
  // @@protoc_insertion_point(field_add:Sitinel.DNSQueryResponse.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::Sitinel::DNSQueryResponse_Record >*
DNSQueryResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:Sitinel.DNSQueryResponse.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::Sitinel::DNSQueryResponse_Record >&
DNSQueryResponse::records() const {
  // @@protoc_insertion_point(field_list:Sitinel.DNSQueryResponse.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Sitinel

// @@protoc_insertion_point(global_scope)
